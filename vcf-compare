#!/usr/bin/perl -w

#   Copyright 2013 Michael Goetz, Peter Goetz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

use strict;

use Text::vCard::Addressbook;
use Getopt::Long qw(:config bundling);

my $SCRIPT_NAME = "vcf-compare";
my $VERSION = "0.1";
my $USAGE = "USAGE: $SCRIPT_NAME <options> file-a.vcf file-b.vcf\n";


my $fuzzy_factor = "5%";

GetOptions("version" => sub { print "$SCRIPT_NAME $VERSION\n"; exit; },
           "help" => sub { print "$USAGE\n"; exit; },
           "fuzzy-factor=s" => \$fuzzy_factor);

die $USAGE if ($#ARGV+1) != 2;

my %vcards_a = build_hash(extract_vcards_from_file($ARGV[0]));
my %vcards_b = build_hash(extract_vcards_from_file($ARGV[1]));
compare_two_lists_of_vcards(\%vcards_a, \%vcards_b);  

print "\n";
print "# entries in file a: ".(scalar keys %vcards_a)." \n";
print "# entries in file b: ".(scalar keys %vcards_b)." \n";



sub extract_vcards_from_file {
    return Text::vCard::Addressbook->new({ 'source_file' => shift, } )->vcards();
}

sub build_hash {
	my @vcards = @_;
	my %result;
	foreach my $vcard (@vcards){
		if (defined $vcard->fullname()){
			$result{$vcard->fullname()} = $vcard;
		} else {
			$result{$vcard->as_string()} = $vcard;
		}
	}
	return %result;
}

sub compare_two_lists_of_vcards {
    my ($vcards_a, $vcards_b) = @_;
	foreach my $vcard_a (values %$vcards_a) {
		if (defined $vcard_a->fullname()) {
			if (exists $vcards_b->{$vcard_a->fullname()}) { 
				compare_two_vcards($vcard_a, $vcards_b->{$vcard_a->fullname()});
			} else {
				print "File a contains vCard '".$vcard_a->fullname()."' which was not found in file b.\n";
			}
		} else {
			if (!exists $vcards_b->{$vcard_a->as_string()}) {
				print "File a contains vCard\n".$vcard_a->as_string()."\nwhich was not found in file b.\n";
			}
		}
	}	
	
	foreach my $s (keys %$vcards_b){
		if (!exists $vcards_a->{$s} ){
			print "File b contains vCard '$s' which was not found in file a.\n";
		}
	}
}

sub compare_two_vcards {
	my ($card_a, $card_b) = @_;
	
	if ($card_a->as_string() ne $card_b->as_string()) {
	    my $fullname = $card_a->fullname();
	    if (contains_more_than_one_photo($card_a)) {
	        print "vCard '$fullname' in file a contains more than one image. Not supported. Skipping.\n";
	        return;
	    }
	    if (contains_more_than_one_photo($card_b)) {
	        print "vCard '$fullname' in file b contains more than one image. Not supported. Skipping.\n";
	        return;
	    }
		
		my $card_a_with_photos_removed = vcard_as_string_without_photos($card_a);
		my $card_b_with_photos_removed = vcard_as_string_without_photos($card_b);

		if ($card_a_with_photos_removed ne $card_b_with_photos_removed) {
			print "vCards for '$fullname' are different:\n\n";
			print "vCard a (photo removed):\n$card_a_with_photos_removed\n";
			print "vCard b (photo removed):\n$card_b_with_photos_removed\n";
		}
		if (!defined $card_a->photo() && defined $card_b->photo()){
			print "vCard b contains a photo for '$fullname', vCard a does not.\n";
		}
		if (defined $card_a->photo() && !defined $card_b->photo()){
			print "vCard a contains a photo for '$fullname', vCard b does not.\n";
		}
		if (defined $card_a->photo() && defined $card_b->photo()) {
			compare_photos($fullname, $card_a->photo(), $card_b->photo());
		}
	}
}

sub contains_more_than_one_photo {
	my ($vcard) = @_;
	if (defined $vcard->photo()) {
		my $photonodes=$vcard->get('PHOTO');
		return @$photonodes > 1;
	} else {
		return 0;
	}
}

sub vcard_as_string_without_photos {
	my ($vcard) = @_;
	my $vcard_as_string = $vcard->as_string();
	if (defined $vcard->photo()) {
		my $photonodes = $vcard->get('PHOTO');   
		my $pattern = $$photonodes[0]->as_string();		   
		$pattern = quotemeta($pattern);		   
		$vcard_as_string =~ s/\r\n$pattern//;
	}
	return $vcard_as_string;
}

sub compare_photos {
	my ($fullname, $photo_a, $photo_b) = @_;
	my $result = photo_diff($fullname, $photo_a, $photo_b);
	if ($result == 1) {
		print "vCards for '$fullname' are different: Photos in a and b differ slightly.\n";
    } elsif ($result == 2) {
		print "vCards for '$fullname' are different: Photos in a and b differ significantly.\n";
	}
}

sub photo_diff {
	my ($name, $photo_content_a, $photo_content_b) = @_;
	$name =~ s/[^a-zA-Z0-9.\/-]/_/g;
	my $filename_a = "${name}1.dat";
	my $filename_b = "${name}2.dat";
   
	open(DAT1,"> ${name}1.dat") or die "Failed to open '$filename_a': $!\n";
	print DAT1 $photo_content_a;
	close DAT1;
	open(DAT2,"> ${name}2.dat") or die "Failed to open '$filename_b': $!\n";
	print DAT2 $photo_content_b;
	close DAT2;

	my $output = qx/compare -metric AE $filename_a $filename_b ${name}.diff.png 2>&1/;
	if ($output == 0) {
		unlink "${name}1.dat", "${name}2.dat";
		return 0;   
	}
	$output = qx/compare -fuzz $fuzzy_factor -metric AE $filename_a $filename_b ${name}.diff.png 2>&1/;
	if ($output == 0){
		return 1;   
	} else {
		return 2;
	}
}
